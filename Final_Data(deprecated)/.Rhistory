data_tt$size_class = U_sizes
data_tt$Tree_type = U_treetype[y]
data_tt$Tree_per_sq_30m = 0
data_tt$main_data.Plot_ID = unique(data_tt$main_data.Plot_ID)
data_tt$main_data.Site_ID = unique(data_tt$main_data.Site_ID)
data_tt$main_data.Country = unique(data_tt$main_data.Country)
data_tt$main_data.X_id = unique(data_tt$main_data.X_id)
data_tt$main_data.Plot_Type = unique(data_tt$main_data.Plot_Type)
data_tt$main_data.Timeframe = unique(data_tt$main_data.Timeframe)
#colnames(data_tt)
#print("here")
return(data_tt)
}else{
#determine which size classes are missing from the data
size_class_to_add = U_sizes[-which(U_sizes %in% unique(data_tt$size_class))]
#add addtional rows
nrow_add = length(size_class_to_add)
if(nrow_add>0){
data_tt2 = data_tt[-which(data_tt$size_class %in% U_sizes ),]
data_tt2[ nrow(data_tt2) + nrow_add,] = NA
#fill-in rows with necessary data
data_tt2$size_class = size_class_to_add
data_tt2$Tree_type = U_treetype[2]
data_tt2$Tree_per_sq_30m = 0
data_tt2$main_data.Plot_ID = unique(data_tt$main_data.Plot_ID)
data_tt2$main_data.Site_ID = unique(data_tt$main_data.Site_ID)
data_tt2$main_data.Country = unique(data_tt$main_data.Country)
data_tt2$main_data.X_id = unique(data_tt$main_data.X_id)
data_tt2$main_data.Plot_Type = unique(data_tt$main_data.Plot_Type)
data_tt2$main_data.Timeframe = unique(data_tt2$main_data.Timeframe)
data_tt3 = rbind(data_tt, data_tt2)
#colnames(data_tt)
#print("there")
return(data_tt3)
}else{
return(data_tt)
}
}
} )
data_tt_out = do.call("rbind", data_tt_out)
return(data_tt_out)
})
data_out = do.call("rbind", tree_freq_data_site_v2)
unique(data_out$main_data.PlantingPattern)
uplantpat = unique(data_out$main_data.PlantingPattern)
print(uplantpat[1])
uplantpat = unique(data_out$main_data.PlantingPattern)
print(uplantpat[1])
30*30
readline("Enter the area in meters squared for the entry above")
as.function( "1*3")
eval(parse(text="1*3")))
eval(parse(text="1*3"))
readline("Enter the area in meters squared for the entry above: ")
#cycle through all of the different types of "main_data.PlantingPattern"s that were entered
#and manually enter the area each planting was given. Divide 900m2 by this number
# and save the output. This is the estimate number of plantings per 30m2.
uplantpat = unique(data_out$main_data.PlantingPattern)
planting_density_estimate = lapply(1:length(uplantpat), FUN=function(x){
print(uplantpat[x])
area_text = readline("Enter the area in meters squared for the entry above: ")
planting_density = eval(parse(text=area_text))
planted_seedling_estimate = 900/planting_density
return(planted_seedling_estimate)
})
planting_density_estimate
planting_density_estimate = do.call("rbind", planting_density_estimate)
planting_density_estimate
est_pl_dens_dat=data_frame(est_pl_dens = planting_density_estimate, PlantingPattern =uplantpat)
est_pl_dens_dat=data.frame(est_pl_dens = planting_density_estimate, PlantingPattern =uplantpat)
est_pl_dens_dat
tree_freq_data_site = merge(data_out, data_out, by.x = "main_data.PlantingPattern", by.y = PlantingPattern)
tree_freq_data_site = merge(data_out, data_out, by.x = "main_data.PlantingPattern", by.y = "PlantingPattern")
tree_freq_data_site = merge(data_out, est_pl_dens_dat, by.x = "main_data.PlantingPattern", by.y = "PlantingPattern")
rnow(data_out)==rnow(tree_freq_data_site)
nrow(data_out)==nrow(tree_freq_data_site)
date = Sys.Date()
PPC_ind_file_name = paste(paste("Data_for_PPC_indicators", date, sep="_"), "csv", sep=".")
write.csv(tree_freq_data_site_F, PPC_ind_file_name, row.names = F)
tree_freq_data_site_F = merge(data_out, est_pl_dens_dat, by.x = "main_data.PlantingPattern", by.y = "PlantingPattern")
nrow(data_out)==nrow(tree_freq_data_site)
date = Sys.Date()
PPC_ind_file_name = paste(paste("Data_for_PPC_indicators", date, sep="_"), "csv", sep=".")
write.csv(tree_freq_data_site_F, PPC_ind_file_name, row.names = F)
#Get data for PPC indicators:
setwd("/Users/tperez/Library/CloudStorage/OneDrive-ConservationInternationalFoundation/Desktop/CI_git_projects/PPC/Raw_Data")
ppc_data_files=list.files(getwd())
#import main and tree data
ind_data=read.csv(ppc_data_files[grep("Data_for_PPC_indicators", ppc_data_files)])
ppc_data_files=list.files(getwd())
ppc_data_files
ppc_data_files=list.files(getwd())
#import main and tree data
ind_data=read.csv(ppc_data_files[grep("Data_for_PPC_indicators", ppc_data_files)])
#Description: This code is part 4 of the analysis pipeline for key indicators for the Priceless
#Planet Coalition. This code takes takes plot size information and tree abundance for all plots and formats
#data from two data sources above to prep data to calculate 1) Number of trees restored
#2) Number of of trees naturally regenerating, and 3) % survival of planted trees.
#-----------------------------------------------------------------------
#Get data for PPC indicators:
setwd("/Users/tperez/Library/CloudStorage/OneDrive-ConservationInternationalFoundation/Desktop/CI_git_projects/PPC/Raw_Data")
ppc_data_files= list.files(getwd())
#import main and tree data
ind_data = read.csv(ppc_data_files[grep("Data_for_PPC_indicators", ppc_data_files)])
ind_data_regen = ind_data[which(ind_data$Tree_type == "naturally_regenerating" |
ind_data$Tree_type == "planted"),]
#Number of regeneratin trees by plot
Ntrees_regen_plot = aggregate(c(ind_data_regen$Tree_per_sq_30m, ind_data_regen $est_pl_dens),
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Plot_ID"=ind_data_regen$main_data.Plot_ID,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
#Number of regeneratin trees by plot
Ntrees_regen_plot = aggregate(c(ind_data_regen$Tree_per_sq_30m, ind_data_regen$est_pl_dens),
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Plot_ID"=ind_data_regen$main_data.Plot_ID,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
ind_data_regen$est_pl_dens
ind_data_regen$Tree_per_sq_30m
tree_freq_data_site_F$est_pl_dens
tree_freq_data_site_F[which(is.na(tree_freq_data_site_F$est_pl_dens)),]$est_pl_dens
tree_freq_data_site_F[which(is.na(tree_freq_data_site_F$est_pl_dens)),]$est_pl_dens = 0
nrow(data_out)==nrow(tree_freq_data_site)
date = Sys.Date()
PPC_ind_file_name = paste(paste("Data_for_PPC_indicators", date, sep="_"), "csv", sep=".")
write.csv(tree_freq_data_site_F, PPC_ind_file_name, row.names = F)
#Description: This code is part 4 of the analysis pipeline for key indicators for the Priceless
#Planet Coalition. This code takes takes plot size information and tree abundance for all plots and formats
#data from two data sources above to prep data to calculate 1) Number of trees restored
#2) Number of of trees naturally regenerating, and 3) % survival of planted trees.
#-----------------------------------------------------------------------
#Get data for PPC indicators:
setwd("/Users/tperez/Library/CloudStorage/OneDrive-ConservationInternationalFoundation/Desktop/CI_git_projects/PPC/Raw_Data")
ppc_data_files= list.files(getwd())
#import main and tree data
ind_data = read.csv(ppc_data_files[grep("Data_for_PPC_indicators", ppc_data_files)])
ind_data_regen = ind_data[which(ind_data$Tree_type == "naturally_regenerating" |
ind_data$Tree_type == "planted"),]
ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")]
#Number of regeneratin trees by plot
Ntrees_regen_plot = aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Plot_ID"=ind_data_regen$main_data.Plot_ID,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
Ntrees_regen_plot
#Number of regenerating trees by site
Ntrees_regen_site=aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
#Subset all planted trees data
planted_trees = Ntrees_regen_plot[which(Ntrees_regen_plot$Tree_type=="planted"),]
#Remove Y to get year that data was monitored
planted_trees$year = as.numeric(gsub("Y", "", planted_trees$Timeframe))
planted_trees=planted_trees[order(planted_trees$year),]
sl_out = lapply(unique(planted_trees$Site_ID), FUN=function(x){
site_level = planted_trees[which(planted_trees$Site_ID==x),]
pl_out = lapply(unique(site_level$Plot_ID), FUN=function(y){
plot_level = site_level[which(site_level$Plot_ID==y),]
sl_out = lapply(unique(plot_level$Species), FUN=function(z){
species_level = plot_level[which(plot_level$Species==z),]
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class==q),]
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$num_regen_trees, NA)),NA)
dl = length(size_class$num_regen_trees)
num_survived2 = num_survived[1:dl]
percent_survived = (size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class$percent_survived = percent_survived
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
return(sc_out_df)
})
sl_out_df = do.call("rbind", sl_out )
return(sl_out_df)
})
pl_out_df = do.call("rbind", pl_out)
return(pl_out_df)
})
#-----------------------------------------------------------------------
#Get data for PPC indicators:
setwd("/Users/tperez/Library/CloudStorage/OneDrive-ConservationInternationalFoundation/Desktop/CI_git_projects/PPC/Raw_Data")
ppc_data_files= list.files(getwd())
#import main and tree data
ind_data = read.csv(ppc_data_files[grep("Data_for_PPC_indicators", ppc_data_files)])
#Number of trees restored: Plot, Site, country
#For every plot that is missing data from a given size classes, it needs to be populated with a zero
#-------------------------------------------------------------------------------
#Calculate the number of restored trees
ind_data_regen = ind_data[which(ind_data$Tree_type == "naturally_regenerating" |
ind_data$Tree_type == "planted"),]
#Number of regeneratin trees by plot
Ntrees_regen_plot = aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Plot_ID"=ind_data_regen$main_data.Plot_ID,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
#colnames(Ntrees_regen_plot)[which(colnames(Ntrees_regen_plot)=="x")]="num_regen_trees"
#Number of regenerating trees by site
Ntrees_regen_site=aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
#colnames(Ntrees_regen_site)[which(colnames(Ntrees_regen_site)=="x")]="num_regen_trees"
#-------------------------------------------------------------------------------
#Calculate the number of naturally regenerating trees
ind_data_natregen=ind_data[which(ind_data$Tree_type == "naturally_regenerating"),]
#Number of regeneratin trees by plot
Ntrees_natregen_plot = aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_natregen$size_class,
"Tree_type"=ind_data_natregen$Tree_type,
"Species"=ind_data_natregen$Species,
"Timeframe"=ind_data_natregen$main_data.Timeframe,
"Plot_ID"=ind_data_natregen$main_data.Plot_ID,
"Site_ID"=ind_data_natregen$main_data.Site_ID), sum)
ind_data_regen = ind_data[which(ind_data$Tree_type == "naturally_regenerating" |
ind_data$Tree_type == "planted"),]
#Number of regeneratin trees by plot
Ntrees_regen_plot = aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Plot_ID"=ind_data_regen$main_data.Plot_ID,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
#Number of regenerating trees by site
Ntrees_regen_site=aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_regen$size_class,
"Tree_type"=ind_data_regen$Tree_type,
"Species"=ind_data_regen$Species,
"Timeframe"=ind_data_regen$main_data.Timeframe,
"Site_ID"=ind_data_regen$main_data.Site_ID), sum)
ind_data_natregen=ind_data[which(ind_data$Tree_type == "naturally_regenerating"),]
#Number of regeneratin trees by plot
Ntrees_natregen_plot = aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_natregen$size_class,
"Tree_type"=ind_data_natregen$Tree_type,
"Species"=ind_data_natregen$Species,
"Timeframe"=ind_data_natregen$main_data.Timeframe,
"Plot_ID"=ind_data_natregen$main_data.Plot_ID,
"Site_ID"=ind_data_natregen$main_data.Site_ID), sum)
ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")]
Ntrees_natregen_plot
aggregate(ind_data_regen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_natregen$size_class,
"Tree_type"=ind_data_natregen$Tree_type,
"Species"=ind_data_natregen$Species,
"Timeframe"=ind_data_natregen$main_data.Timeframe,
"Plot_ID"=ind_data_natregen$main_data.Plot_ID,
"Site_ID"=ind_data_natregen$main_data.Site_ID), sum)
ind_data_natregen=ind_data[which(ind_data$Tree_type == "naturally_regenerating"),]
ind_data_natregen
ind_data_natregen=ind_data[which(ind_data$Tree_type == "naturally_regenerating"),]
#Number of regeneratin trees by plot
Ntrees_natregen_plot = aggregate(ind_data_natregen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_natregen$size_class,
"Tree_type"=ind_data_natregen$Tree_type,
"Species"=ind_data_natregen$Species,
"Timeframe"=ind_data_natregen$main_data.Timeframe,
"Plot_ID"=ind_data_natregen$main_data.Plot_ID,
"Site_ID"=ind_data_natregen$main_data.Site_ID), sum)
#Number of regenerating trees by site
Ntrees_natregen_site = aggregate(ind_data_natregen[,c("Tree_per_sq_30m", "est_pl_dens")],
list("size_class"=ind_data_natregen$size_class,
"Tree_type"=ind_data_natregen$Tree_type,
"Species"=ind_data_natregen$Species,
"Timeframe"=ind_data_natregen$main_data.Timeframe,
"Site_ID"=ind_data_natregen$main_data.Site_ID), sum)
#Subset all planted trees data
planted_trees = Ntrees_regen_plot[which(Ntrees_regen_plot$Tree_type=="planted"),]
#Remove Y to get year that data was monitored
planted_trees$year = as.numeric(gsub("Y", "", planted_trees$Timeframe))
planted_trees=planted_trees[order(planted_trees$year),]
sl_out = lapply(unique(planted_trees$Site_ID), FUN=function(x){
site_level = planted_trees[which(planted_trees$Site_ID==x),]
pl_out = lapply(unique(site_level$Plot_ID), FUN=function(y){
plot_level = site_level[which(site_level$Plot_ID==y),]
sl_out = lapply(unique(plot_level$Species), FUN=function(z){
species_level = plot_level[which(plot_level$Species==z),]
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class==q),]
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$num_regen_trees, NA)),NA)
dl = length(size_class$num_regen_trees)
num_survived2 = num_survived[1:dl]
percent_survived = (size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class$percent_survived = percent_survived
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
return(sc_out_df)
})
sl_out_df = do.call("rbind", sl_out )
return(sl_out_df)
})
pl_out_df = do.call("rbind", pl_out)
return(pl_out_df)
})
site_level = planted_trees[which(planted_trees$Site_ID==1),]
pl_out = lapply(unique(site_level$Plot_ID), FUN=function(y){
plot_level = site_level[which(site_level$Plot_ID==y),]
sl_out = lapply(unique(plot_level$Species), FUN=function(z){
species_level = plot_level[which(plot_level$Species==z),]
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class==q),]
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$num_regen_trees, NA)),NA)
dl = length(size_class$num_regen_trees)
num_survived2 = num_survived[1:dl]
percent_survived = (size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class$percent_survived = percent_survived
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
return(sc_out_df)
})
sl_out_df = do.call("rbind", sl_out )
return(sl_out_df)
})
pl_out_df = do.call("rbind", pl_out)
return(pl_out_df)
sl_out = lapply(unique(planted_trees$Site_ID), FUN=function(x){
site_level = planted_trees[which(planted_trees$Site_ID==x),]
pl_out = lapply(unique(site_level$Plot_ID), FUN=function(y){
plot_level = site_level[which(site_level$Plot_ID==y),]
sl_out = lapply(unique(plot_level$Species), FUN=function(z){
species_level = plot_level[which(plot_level$Species==z),]
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class==q),]
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$num_regen_trees, NA)),NA)
dl = length(size_class$num_regen_trees)
num_survived2 = num_survived[1:dl]
percent_survived = (size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class$percent_survived = percent_survived
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
return(sc_out_df)
})
sl_out_df = do.call("rbind", sl_out )
return(sl_out_df)
})
pl_out_df = do.call("rbind", pl_out)
return(pl_out_df)
})
site_level = planted_trees[which(planted_trees$Site_ID==1),]
sl_out = lapply(unique(planted_trees$Site_ID), FUN=function(x){
site_level = planted_trees[which(planted_trees$Site_ID==x),]
print(x)
pl_out = lapply(unique(site_level$Plot_ID), FUN=function(y){
plot_level = site_level[which(site_level$Plot_ID==y),]
print(y)
sl_out = lapply(unique(plot_level$Species), FUN=function(z){
species_level = plot_level[which(plot_level$Species==z),]
print(z)
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class==q),]
print(q)
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$num_regen_trees, NA)),NA)
dl = length(size_class$num_regen_trees)
num_survived2 = num_survived[1:dl]
percent_survived = (size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class$percent_survived = percent_survived
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
return(sc_out_df)
})
sl_out_df = do.call("rbind", sl_out )
return(sl_out_df)
})
pl_out_df = do.call("rbind", pl_out)
return(pl_out_df)
})
size_class$num_regen_trees
site_level = planted_trees[which(planted_trees$Site_ID==1),]
site_level = planted_trees[which(planted_trees$Site_ID=="#40 - TEST"),]
print(x)
site_level = planted_trees[which(planted_trees$Site_ID=="#40 - TEST"),]
plot_level = site_level[which(site_level$Plot_ID=="Parcela 1"),]
species_level = plot_level[which(plot_level$Species=="Fedegoso"),]
size_class = species_level[which(species_level$size_class=="1-9.9cm"),]
size_class[order(size_class$year),]
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$num_regen_trees, NA)),NA)
num_survived
dl = length(size_class$num_regen_trees)
dl
size_class
size_class$num_regen_trees
dl = nrow(size_class)
num_survived[1:dl]
dl = nrow(size_class)
num_survived[1:dl]
dl
num_survived[1:dl]
num_survived
num_survived2 = num_survived[1:dl]
(size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class
percent_survived = (size_class$num_regen_trees-num_survived2)/size_class$num_regen_trees
size_class$percent_survived = percent_survived
percent_survived
num_survived2
num_survived[1:dl]
size_class$num_regen_trees-num_survived2
num_survived2
size_class$num_regen_trees
size_class
size_class
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class=="1-9.9cm"),]
print(q)
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$Tree_per_sq_30m, NA)),NA)
dl = nrow(size_class)
num_survived2 = num_survived[1:dl]
percent_survived = (size_class$Tree_per_sq_30m-num_survived2)/size_class$Tree_per_sq_30m
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
sc_out_df
sc_out_df
sc_out_df
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class=="1-9.9cm"),]
print(q)
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$Tree_per_sq_30m, NA)),NA)
dl = nrow(size_class)
num_survived2 = num_survived[1:dl]
size_class$percent_survived = (size_class$Tree_per_sq_30m-num_survived2)/size_class$Tree_per_sq_30m
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
sc_out_df
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class=="1-9.9cm"),]
print(q)
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$Tree_per_sq_30m, NA)),NA)
dl = nrow(size_class)
size_class$num_survived2 = num_survived[1:dl]
size_class$percent_survived = (size_class$Tree_per_sq_30m-num_survived2)/size_class$Tree_per_sq_30m
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
sl_out = lapply(unique(planted_trees$Site_ID), FUN=function(x){
site_level = planted_trees[which(planted_trees$Site_ID==x),]
print(x)
pl_out = lapply(unique(site_level$Plot_ID), FUN=function(y){
plot_level = site_level[which(site_level$Plot_ID==y),]
print(y)
sl_out = lapply(unique(plot_level$Species), FUN=function(z){
species_level = plot_level[which(plot_level$Species==z),]
print(z)
sc_out = lapply(unique(species_level$size_class), FUN=function(q){
size_class = species_level[which(species_level$size_class==q),]
print(q)
size_class = size_class[order(size_class$year),]
num_survived = c(diff(c(size_class$Tree_per_sq_30m, NA)),NA)
dl = nrow(size_class)
size_class$num_survived2 = num_survived[1:dl]
size_class$percent_survived = (size_class$Tree_per_sq_30m-num_survived2)/size_class$Tree_per_sq_30m
return(size_class)
})
sc_out_df = do.call("rbind", sc_out)
return(sc_out_df)
})
sl_out_df = do.call("rbind", sl_out )
return(sl_out_df)
})
pl_out_df = do.call("rbind", pl_out)
return(pl_out_df)
})
sl_out_df = do.call("rbind", sl_out)
sl_out_df
setwd("/Users/tperez/Library/CloudStorage/OneDrive-ConservationInternationalFoundation/Desktop/CI_git_projects/PPC/Final_Data")
#write results:
date=Sys.Date()
#Number of regeneratin trees by plot
Restored_by_plot = paste(paste("Restored_by_plot", date, sep="_"), "csv", sep=".")
write.csv(Ntrees_regen_plot, Restored_by_plot)
#Number of regenerating trees by site
Restored_by_site = paste(paste("Restored_by_site", date, sep="_"), "csv", sep=".")
write.csv(Ntrees_regen_site, Restored_by_site)
#Number of regeneratin trees by plot
Regeneration_by_plot = paste(paste("Regeneration_by_plot", date, sep="_"), "csv", sep=".")
write.csv(Ntrees_natregen_plot, Regeneration_by_plot)
#Number of regenerating trees by site
Regeneration_by_site = paste(paste("Regeneration_by_site", date, sep="_"), "csv", sep=".")
write.csv(Ntrees_natregen_site, Regeneration_by_site)
#Survival of planted trees:
Survival_data = paste(paste("Survival_by_site", date, sep="_"), "csv", sep=".")
write.csv(sl_out_df, Survival_data)
